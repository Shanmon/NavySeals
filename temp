{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyodbc\n",
    "import pandas as pd\n",
    "import time\n",
    "from sqlalchemy import create_engine\n",
    "from sqlalchemy.engine import URL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "server = '13.0.5893.48'\n",
    "database = 'PortalListing'\n",
    "username = 'argha'\n",
    "password = '@Sql2016'\n",
    "driver = '{ODBC Driver 18 for SQL Server}'\n",
    "\n",
    "connection_string = f'DRIVER={driver};SERVER={server};DATABASE={database};UID={username};PWD={password}'\n",
    "\n",
    "params = 'DRIVER={ODBC Driver 17 for SQL Server};SERVER=192.168.0.6;DATABASE=PortalListing;UID=argha;PWD=@Sql2016;'\n",
    "\n",
    "conn = pyodbc.connect(params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\lfpc14\\AppData\\Local\\Temp\\9\\ipykernel_29596\\1686186568.py:10: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  df = pd.read_sql_query(sql, conn)\n"
     ]
    }
   ],
   "source": [
    "sql = \"\"\"\n",
    "SELECT\n",
    "ID,\n",
    "CAST(PROPERTY_ADDRESS as nvarchar(max)) as ADDR\n",
    "FROM [PortalListing].[dbo].[rental]\n",
    "WHERE PROPERTY_ADDRESS IS NOT NULL;\n",
    "\"\"\" \n",
    " \n",
    " \n",
    "df = pd.read_sql_query(sql, conn)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load data to postgres\n",
    "def load(df, tbl):\n",
    "    try:\n",
    "        rows_imported = 0\n",
    "        engine = create_engine(f'postgresql://{uid}:{pwd}@{server}:5432/adventureworks')\n",
    "        print(f'importing rows {rows_imported} to {rows_imported + len(df)}... for table {tbl}')\n",
    "        # save df to postgres\n",
    "        df.to_sql(f'stg_{tbl}', engine, if_exists='replace', index=False, chunksize=100000)\n",
    "        rows_imported += len(df)\n",
    "        # add elapsed time to final print out\n",
    "        print(\"Data imported successful\")\n",
    "    except Exception as e:\n",
    "        print(\"Data load error: \" + str(e))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sqlalchemy import create_engine\n",
    "import psycopg2 \n",
    "\n",
    "conn_string = 'postgresql://pgargha:%40Argha1@localhost:5433/postgres'\n",
    "db = create_engine(conn_string)\n",
    "\n",
    "connp= db.connect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "to_sql duration: 23.2449152469635 seconds\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# engine = create_engine('postgresql://pgargha:@Argha1@localhost:5433/postgres')\n",
    "# params = 'postgresql+psycopg2://:@192.168.0.7/postgres' \n",
    "# jdbc:postgresql://localhost:5433/postgres\n",
    "\n",
    "start_time = time.time()\n",
    "df.to_sql('rental_staging', con=connp, if_exists='replace', index=False)\n",
    "print(\"to_sql duration: {} seconds\".format(time.time() - start_time))\n",
    "\n",
    "# df.to_sql('table_name1', engine, if_exists='replace',index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ID      2197929\n",
      "ADDR    2197929\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.count())\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rentak_df_20240131-215138_.pkl\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "timestr = time.strftime(\"%Y%m%d-%H%M%S\")\n",
    "\n",
    "\n",
    "filename = 'rentak_df_'+timestr + '_.pkl'\n",
    "\n",
    "df.to_pickle(filename)\n",
    "\n",
    "print (filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\lfpc14\\AppData\\Local\\Temp\\9\\ipykernel_29596\\2495984550.py:9: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  df_resale = pd.read_sql_query(sql_resale, conn)\n"
     ]
    }
   ],
   "source": [
    "sql_resale = \"\"\"\n",
    "SELECT ID,\n",
    "CAST(PROPERTY_ADDRESS as nvarchar(max)) as PROPERTY_ADDRESS\n",
    " FROM\t[PortalListing].[dbo].[resale]\n",
    " WHERE\tPROPERTY_ADDRESS IS NOT NULL;\n",
    "\"\"\" \n",
    " \n",
    " \n",
    "df_resale = pd.read_sql_query(sql_resale, conn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resale record count : ID                  4473048\n",
      "PROPERTY_ADDRESS    4473048\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Resale record count : \" +  str(df_resale.count()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "resale_df_20240131-220409_.pkl\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "timestr = time.strftime(\"%Y%m%d-%H%M%S\")\n",
    "filename = 'resale_df_'+timestr + '_.pkl'\n",
    "df.to_pickle(filename)\n",
    "print (filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "start_time = time.time()\n",
    "df_resale.to_sql('resale_staging', con=connp, if_exists='replace', index=False)\n",
    "print(\"to_sql duration for Resale : {} seconds\".format(time.time() - start_time))"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "5af9e9a3305766277920819757c58d17c3a81c7f5d0cb7c423223297acda0a20"
  },
  "kernelspec": {
   "display_name": "Python 3.12.1 64-bit",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
